[
    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {bouncer_client, [
        {space_size             , 8},
        {hash_algorithm         , sha256},
        {service_clients, #{
            bouncer => #{
                url => <<"http://bouncer:8022/">>,
                retries => #{
                    % function => retry strategy
                    % '_' work as "any"
                    % default value is 'finish'
                    % for more info look genlib_retry :: strategy()
                    % https://github.com/rbkmoney/genlib/blob/master/src/genlib_retry.erl#L19
                    'Judge'   => {linear, 3, 1000},
                    '_'     => finish
                }
            },
            org_management => #{
                url => <<"http://org_management:8022/">>,
                retries => #{
                    % function => retry strategy
                    % '_' work as "any"
                    % default value is 'finish'
                    % for more info look genlib_retry :: strategy()
                    % https://github.com/rbkmoney/genlib/blob/master/src/genlib_retry.erl#L19
                    'Judge'   => {linear, 3, 1000},
                    '_'     => finish
                }
            }
        }},
        {health_checkers, [
            {erl_health, disk     , ["/", 99]        },
            {erl_health, cg_memory, [99]             },
            {erl_health, service  , [<<"bouncer_client_erlang">>]}
        ]}
    ]},
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                    level => debug,
                    config => #{
                        type => file,
                        file => "/var/log/shortener/console.json",
                        sync_mode_qlen => 20,
                        burst_limit_enable => true,
                        burst_limit_max_count => 600,
                        burst_limit_window_time => 1000
                    },
                    filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                    formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                    level => info,
                    config => #{
                        type => {file, "/var/log/shortener/access_log.json"},
                        sync_mode_qlen => 20,
                        burst_limit_enable => true,
                        burst_limit_max_count => 600,
                        burst_limit_window_time => 1000
                    },
                    filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                    formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {prometheus, [
        {collectors, [default]}
    ]}

].
